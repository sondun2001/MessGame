#
# Human tree
#

import isThirsty?:"com.rebelo.messgame.ai.human.IsThirstyCondition"
import isHungry?:"com.rebelo.messgame.ai.human.IsHungryCondition"
import isHomeless?:"com.rebelo.messgame.ai.human.IsHomelessCondition"
import hasNoAccessToWater?:"com.rebelo.messgame.ai.human.HasNoAccessToWaterCondition"
import hasNoAccessToFood?:"com.rebelo.messgame.ai.human.HasNoAccessToFoodCondition"

import useWater:"com.rebelo.messgame.ai.human.UseWaterTask"
import useFood:"com.rebelo.messgame.ai.human.UseFoodTask"
import wander:"com.rebelo.messgame.ai.human.WanderTask"
import observe:"com.rebelo.messgame.ai.human.ObserveTask"

subtree name:"isBiologicalNeedsMet?"
  parallel policy:"selector"
    isThirsty?
    isHungry?
    #isHomeless?
    #hasNoAccessToWater?
    #hasNoAccessToFood?

subtree name:"satisfyBiologicalNeeds"
  dynamicGuardSelector
    (isThirsty?) useWater
    (isHungry?) useFood
    #(hasNoAccessToWater?) $findAndStoreWater # is at least aware of water location, store if possible
    #(hasNoAccessToFood?) $findAndStoreFood # is at least aware of food location, store if possible
    #(isHomeless?) $findShelter

subtree name:"findAndStoreWater"

subtree name:"findAndStoreFood"

subtree name:"findShelter"

subtree name:"actOnYourOwn"
  randomSelector
    wander
    observe stance:"SITTING"
    observe stance:"STANDING"

root
  dynamicGuardSelector
    ($isBiologicalNeedsMet?)       $satisfyBiologicalNeeds
    ()                             $actOnYourOwn  # fallback behavior (no guard)